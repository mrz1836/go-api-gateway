# https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-specification-template-anatomy.html
AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Example using Go, AWS API Gateway and Lambda deployed via AWS SAM

# More info about Parameters: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/parameters-section-structure.html
Parameters:

  ApplicationName:
    Description: 'used to create the name of the application in cloud formation'
    Type: String
    AllowedPattern: '[a-zA-Z0-9-_]*'
    MinLength: 3
    MaxLength: 64
    ConstraintDescription: 'must be a valid application name'

  ApplicationStackName:
    Description: 'used to create the name of the stack in cloud formation'
    Type: String
    AllowedPattern: '[a-zA-Z0-9-_]*'
    MinLength: 3
    MaxLength: 64
    ConstraintDescription: 'must be a valid application stack name'

  ApplicationStageName:
    Description: 'used for the de-coupling based on environment (IE: production)'
    Type: String
    AllowedPattern: '[a-zA-Z0-9-_]*'
    MinLength: 1
    MaxLength: 16
    ConstraintDescription: 'must be a valid stage name (IE: dev, staging, production)'

  ApplicationBucket:
    Type: String
    Description: 'Pre-existing S3 bucket that will store the application files for deployment'
    MinLength: 5
    AllowedPattern: "[A-Za-z0-9-_]+"
    ConstraintDescription: 'must be a valid s3 bucket location'

  ApplicationBucketPrefix:
    Type: String
    Description: 'Prefix directory inside the bucket for the application'
    MinLength: 1
    AllowedPattern: "[A-Za-z0-9-_]+"
    ConstraintDescription: 'must be a valid s3 bucket prefix'

  EncryptionKeyId:
    Type: AWS::SSM::Parameter::Value<String>
    Description: "The ID of the KMS key used to decrypt environment variables"
    MinLength: 5

  ApplicationDomain:
    Description: 'custom domain for the distribution'
    Type: String
    MinLength: 5
    AllowedPattern: "[A-Za-z0-9-.]+"
    ConstraintDescription: 'must be a valid domain name'

  ApplicationDockerHubArn:
    Type: AWS::SSM::Parameter::Value<String>
    Description: 'ARN for the DockerHub credentials'
    MinLength: 5

  ApplicationHostedZoneId:
    Type: AWS::SSM::Parameter::Value<String>
    Description: 'ID of the Route 53 hosted zone for DNS with the ApplicationDomain'
    MinLength: 5

  ApplicationCertificateId:
    Type: AWS::SSM::Parameter::Value<String>
    Description: 'ID of the Amazon SSL Certificate for the ApplicationDomain'
    MinLength: 5

  ApplicationPrivateSubnet1:
    Type: AWS::SSM::Parameter::Value<String>
    Description: 'Private subnet on the VPC'

  ApplicationPrivateSubnet2:
    Type: AWS::SSM::Parameter::Value<String>
    Description: 'Private subnet on the VPC'

  VPCId:
    Type: AWS::SSM::Parameter::Value<String>
    Description: 'vpc id from creating the vpc'

  RepoOwner:
    Type: String
    Description: 'the repository owner or username'
    MinLength: 2
    AllowedPattern: "[A-Za-z0-9-]+"
    ConstraintDescription: 'must be a valid repository username'

  RepoName:
    Type: String
    Description: 'the repository name'
    MinLength: 1
    AllowedPattern: "[A-Za-z0-9-_]+"
    ConstraintDescription: 'must be a valid repository name'

  RepoBranch:
    Type: String
    Description: 'the repository branch that will trigger automatic deployments'
    MinLength: 1
    AllowedPattern: "[A-Za-z0-9-_/]+"
    ConstraintDescription: 'must be a valid branch name'

  # https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/Lambda-Insights-Getting-Started-cloudformation.html
  InsightsEnabled:
    Type: String
    Description: 'Enable Lambda Insights'
    Default: 'false'
    AllowedValues:
      - 'true'
      - 'false'

# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/conditions-section-structure.html
Conditions:
  EnableLambdaInsights: !Equals
    - !Ref InsightsEnabled
    - 'true'

# More info about MetaData: https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-sam-template-publishing-applications-metadata-properties.html
Metadata:
  AWS::ServerlessRepo::Application:
    Name: !Ref ApplicationStackName
    Description: 'Example using Go, AWS API Gateway and Lambda deployed via AWS SAM'
    Author: MrZ
    Labels: ['lambda','gateway','api','go','golang','sam','serverless','example']
    HomePageUrl: !Sub 'https://github.com/${RepoOwner}/${RepoName}'
    SemanticVersion: '0.0.1'
    SourceCodeUrl: !Sub 'https://github.com/${RepoOwner}/${RepoName}'

# More info about Globals: https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-specification-template-anatomy-globals.html
Globals:
  Function:
    MemorySize: 512
    Timeout: 10
    Runtime: go1.x
    KmsKeyArn: !Sub 'arn:aws:kms:${AWS::Region}:${AWS::AccountId}:key/${EncryptionKeyId}'
    Layers:
      - !If
        - EnableLambdaInsights
        - !Sub "arn:aws:lambda:${AWS::Region}:580247275435:layer:LambdaInsightsExtension:21"
        - !Ref AWS::NoValue
    VpcConfig:
      SecurityGroupIds:
        - !Ref LambdaSecurityGroup
      SubnetIds:
        - !Ref ApplicationPrivateSubnet1
        - !Ref ApplicationPrivateSubnet2
    Architectures:
      - x86_64
    Environment:
      Variables:
        APPLICATION_STAGE_NAME: !Ref ApplicationStageName
        EXAMPLE_SECRET: !Sub "{{resolve:secretsmanager:${ApplicationStageName}/${ApplicationName}:SecretString:example_secret_encrypted}}"

# More info about Resources: https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-specification-resources-and-properties.html
Resources:

  # https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-api.html
  GoAPI:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref ApplicationStageName
      Description: 'Example using Go, AWS API Gateway and Lambda deployed via AWS SAM'
      # https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-controlling-access-to-apis-keys.html
      #Auth:
      #  ApiKeyRequired: true # sets for all methods
      # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigateway-domainname.html
      # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigateway-basepathmapping.html#cfn-apigateway-basepathmapping-stage
      Domain:
        DomainName: !Sub "api.${ApplicationDomain}"
        CertificateArn: !Sub "arn:aws:acm:${AWS::Region}:${AWS::AccountId}:certificate/${ApplicationCertificateId}"
        EndpointConfiguration: EDGE
        Route53:
          HostedZoneId: !Ref ApplicationHostedZoneId

  # https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-function.html
  HelloWorldFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${ApplicationName}-hello-world"
      Description: "This function will say Hello World!"
      CodeUri: ./cmd/functions/hello_world
      Handler:  hello_world
      Role: !GetAtt LambdaExecutionRole.Arn
      # https://docs.aws.amazon.com/lambda/latest/dg/golang-tracing.html#golang-xray-sdk
      Tracing: !If [EnableLambdaInsights, Active, PassThrough ]
      Policies:
        - KMSDecryptPolicy:
            KeyId: !Ref EncryptionKeyId
      Events:
        CatchAll:
          Type: Api
          Properties:
            RestApiId: !Ref GoAPI
            Path: /
            Method: GET
            #Auth:
            #  ApiKeyRequired: true

  # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-logs-loggroup.html
  HelloWorldFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${HelloWorldFunction}'
      RetentionInDays: 90

  # https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-function.html
  PingPongFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${ApplicationName}-ping-pong"
      Description: "This function will say Ping Pong!"
      CodeUri: ./cmd/functions/ping_pong
      Handler:  ping_pong
      Role: !GetAtt LambdaExecutionRole.Arn
      # https://docs.aws.amazon.com/lambda/latest/dg/golang-tracing.html#golang-xray-sdk
      Tracing: !If [EnableLambdaInsights, Active, PassThrough ]
      Policies:
        - KMSDecryptPolicy:
            KeyId: !Ref EncryptionKeyId
      Events:
        CatchAll:
          Type: Api
          Properties:
            RestApiId: !Ref GoAPI
            Path: /ping
            Method: GET
            #Auth:
            #  ApiKeyRequired: true

  # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-logs-loggroup.html
  PingPongFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${PingPongFunction}'
      RetentionInDays: 90

  # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-codepipeline-pipeline.html
  CodePipeline:
    Type: AWS::CodePipeline::Pipeline
    DependsOn:
      - CodeBuildProject
      - CodeBuildRole
      - CodePipelineRole
    Properties:
      Name: !Sub "${ApplicationStackName}-deployment"
      ArtifactStore:
        Type: S3
        Location: !Ref ApplicationBucket
      RestartExecutionOnUpdate: false
      RoleArn: !GetAtt CodePipelineRole.Arn
      # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-codepipeline-pipeline-stages.html
      Stages:
        - Name: Source
          Actions:
            - Name: Source-From-Github
              InputArtifacts: []
              RunOrder: 1
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Version: 1
                Provider: GitHub
              OutputArtifacts:
                - Name: SourceCode
              Configuration:
                Owner: !Ref RepoOwner
                Repo: !Ref RepoName
                Branch: !Ref RepoBranch
                PollForSourceChanges: false
                OAuthToken: !Sub "{{resolve:secretsmanager:${ApplicationStageName}/${ApplicationName}:SecretString:github_personal_token}}"
        - Name: Build
          Actions:
            - Name: Build-and-Deploy-Stack
              RunOrder: 3
              InputArtifacts:
                - Name: SourceCode
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: 1
                Provider: CodeBuild
              Configuration:
                ProjectName:
                  Ref: CodeBuildProject

  # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-codebuild-project.html
  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub "${ApplicationStackName}-build-deploy"
      ServiceRole: !Ref CodeBuildRole
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-codebuild-project-registrycredential.html
        ImagePullCredentialsType: SERVICE_ROLE
        RegistryCredential:
          Credential: !Sub "${ApplicationDockerHubArn}" # Docker credentials are needed to pull the custom image
          CredentialProvider: "SECRETS_MANAGER"
        # Image: aws/codebuild/standard:5.0
        Image: shogo82148/codebuild-golang:1.20-standard-5.0 # This allows us to use new versions of Go that AWS does not support
        EnvironmentVariables:
          - Name: APPLICATION_NAME
            Type: PLAINTEXT
            Value: !Ref ApplicationName
          - Name: APPLICATION_STACK_NAME
            Type: PLAINTEXT
            Value: !Ref ApplicationStackName
          - Name: APPLICATION_BUCKET
            Type: PLAINTEXT
            Value: !Ref ApplicationBucket
          - Name: APPLICATION_BUCKET_PREFIX
            Type: PLAINTEXT
            Value: !Ref ApplicationBucketPrefix
          - Name: APPLICATION_STAGE_NAME
            Type: PLAINTEXT
            Value: !Ref ApplicationStageName
          - Name: REPO_BRANCH
            Type: PLAINTEXT
            Value: !Ref RepoBranch
          #- Name: REDIS_CONNECTION
          #  Type: PLAINTEXT
          #  Value: !Ref RedisConnection
          #- Name: APPLICATION_SECURITY_GROUP
          #  Type: PLAINTEXT
          #  Value: !Ref ApplicationSecurityGroup
      Source:
        Type: CODEPIPELINE
        BuildSpec: "buildspec.yml"
      TimeoutInMinutes: 15
      QueuedTimeoutInMinutes: 60

  # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-codepipeline-webhook.html
  GithubWebhook:
    Type: AWS::CodePipeline::Webhook
    DependsOn:
      - CodePipeline
    Properties:
      Authentication: GITHUB_HMAC
      AuthenticationConfiguration:
        SecretToken: !Sub "{{resolve:secretsmanager:${ApplicationStageName}/${ApplicationName}:SecretString:github_personal_token}}"
      RegisterWithThirdParty: 'true'
      Filters:
        - JsonPath: "$.ref"
          MatchEquals: refs/heads/{Branch}
      TargetPipeline: !Ref CodePipeline
      TargetAction: Source-From-Github
      TargetPipelineVersion: !GetAtt CodePipeline.Version

  # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-role.html
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/CloudWatchLambdaInsightsExecutionRolePolicy'
      Policies:
        - PolicyName: allowVPC
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ec2:DescribeNetworkInterfaces
                  - ec2:CreateNetworkInterface
                  - ec2:DeleteNetworkInterface
                  - ec2:DescribeInstances
                  - ec2:AttachNetworkInterface
                Resource: "*"
        - PolicyName: allowLambdaLogs
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - !Sub "arn:aws:codebuild:${AWS::Region}:${AWS::AccountId}:build/${ApplicationStackName}-build*"
                  - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group/aws/codebuild/${ApplicationStackName}-build*"
                  - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/${ApplicationStackName}-build*"

  # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-role.html
  CodeBuildRole:
    Type: AWS::IAM::Role
    Properties:
      Description: "This role is for the CodeBuild resource for CodeProjects"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - cloudformation.amazonaws.com
                - codebuild.amazonaws.com
                - kms.amazonaws.com
                - lambda.amazonaws.com
                - logs.amazonaws.com
                - events.amazonaws.com
                - s3.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: DecryptEnvVars
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - kms:DescribeKey
                  - kms:Decrypt
                Resource: !Sub "arn:aws:kms:${AWS::Region}:${AWS::AccountId}:key/${EncryptionKeyId}"
        - PolicyName: CloudFormationBuildDeploy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - !Sub "arn:aws:codebuild:${AWS::Region}:${AWS::AccountId}:build/${ApplicationStackName}-build*"
                  - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group/aws/codebuild/${ApplicationStackName}-build*"
                  - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/${ApplicationStackName}-build*"
              - Effect: Allow
                Action:
                  - s3:GetBucketAcl
                  - s3:GetBucketLocation
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:PutObject
                Resource:
                  - !Sub "arn:aws:s3:::codepipeline-${AWS::Region}-*"
                  - !Sub "arn:aws:s3:::${ApplicationBucket}/*"
              - Effect: Allow
                Action:
                  - codebuild:BatchPutTestCases
                  - codebuild:CreateReport
                  - codebuild:CreateReportGroup
                  - codebuild:UpdateReport
                Resource:
                  - !Sub "arn:aws:codebuild:${AWS::Region}:${AWS::AccountId}:report-group/${ApplicationStackName}-build*"
              - Effect: Allow
                Action:
                  - cloudformation:Cancel*
                  - cloudformation:Continue*
                  - cloudformation:Create*
                  - cloudformation:Describe*
                  - cloudformation:Detect*
                  - cloudformation:Estimate*
                  - cloudformation:Execute*
                  - cloudformation:Get*
                  - cloudformation:List*
                  - cloudformation:Register*
                  - cloudformation:Set*
                  - cloudformation:Signal*
                  - cloudformation:Stop*
                  - cloudformation:Tag*
                  - cloudformation:Untag*
                  - cloudformation:Update*
                  - cloudformation:Validate*
                Resource:
                  - !Sub "arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:changeSet/*"
                  - !Sub "arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stackset/*"
                  - !Sub "arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${ApplicationStackName}*"
                  - !Sub "arn:aws:cloudformation:${AWS::Region}:aws:transform/Serverless*"
              - Effect: Allow
                Action:
                  - lambda:AddPermission*
                  - lambda:RemovePermission*
                  - lambda:Create*
                  - lambda:Get*
                  - lambda:Invoke*
                  - lambda:List*
                  - lambda:Publish*
                  - lambda:Put*
                  - lambda:Tag*
                  - lambda:Untag*
                  - lambda:Update*
                Resource:
                  - !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${ApplicationName}-*"
              - Effect: Allow
                Action:
                  - secretsmanager:Get*
                Resource:
                  - !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:${ApplicationStageName}/${ApplicationName}/dockerhub*"
              - Effect: Allow
                Action:
                  - ssm:Get*
                Resource:
                  - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${ApplicationName}/${ApplicationStageName}*"
                  - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${ApplicationStageName}/${ApplicationName}*"
                  - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${ApplicationDomain}*"
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecret*
                Resource:
                  - !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:${ApplicationStageName}/${ApplicationName}*"
              - Effect: Allow
                Action:
                  - iam:Get*
                  - iam:Pass*
                Resource:
                  - "*"
              - Effect: Allow
                Action:
                  - events:*
                Resource:
                  - "*"
              - Effect: Allow
                Action:
                  - codepipeline:Get*
                Resource:
                  - "*"

  # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-role.html
  CodePipelineRole:
    Type: AWS::IAM::Role
    Properties:
      Description: "This role is for the CodePipeline execution and deployment"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codepipeline.amazonaws.com
                - s3.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: PipelineDeployRole
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                  - iam:PassRole
                Resource: "*"
                Effect: Allow
                Condition:
                  StringEqualsIfExists:
                    iam:PassedToService:
                      - cloudformation.amazonaws.com
                      - elasticbeanstalk.amazonaws.com
                      - ec2.amazonaws.com
                      - ecs-tasks.amazonaws.com
              - Action:
                  - codedeploy:CreateDeployment
                  - codedeploy:GetApplication
                  - codedeploy:GetApplicationRevision
                  - codedeploy:GetDeployment
                  - codedeploy:GetDeploymentConfig
                  - codedeploy:RegisterApplicationRevision
                Resource: "*"
                Effect: Allow
              - Action:
                  - cloudwatch:*
                  - elasticbeanstalk:DescribeApplications
                  - elasticbeanstalk:DescribeEnvironments
                  - sns:*
                Resource: "*"
                Effect: Allow
              - Action:
                  - s3:CreateBucket
                  - s3:GetBucketPolicy
                  - s3:GetBucketVersioning
                  - s3:GetObject
                  - s3:GetObjectAcl
                  - s3:GetObjectVersion
                  - s3:ListAllMyBuckets
                  - s3:ListBucket
                  - s3:PutBucketPolicy
                  - s3:PutObject
                  - s3:PutObjectAcl
                Resource:
                  - !Sub "arn:aws:s3:::${ApplicationBucket}/*"
                Effect: Allow
              - Action:
                  - lambda:GetFunctionConfiguration
                  - lambda:InvokeFunction
                  - lambda:ListFunctions
                Resource:
                  - !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${ApplicationStackName}"
                Effect: Allow
              - Action:
                  - codebuild:BatchGetBuilds
                  - codebuild:StartBuild
                Resource: "*"
                Effect: Allow
              - Action:
                  - cloudformation:ValidateTemplate
                Effect: Allow
                Resource: "*"

  # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-security-group.html
  LambdaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Security group for lambda functions"
      VpcId:
        Ref: VPCId
      SecurityGroupIngress:
        - IpProtocol: "tcp"
          FromPort: 3306
          ToPort: 3306
          Description: "example-database-connection"
          CidrIp: "8.8.8.8/32"
      SecurityGroupEgress:
        - CidrIp: "0.0.0.0/0"
          IpProtocol: "-1"

  # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-vpcendpoint.html
  CloudWatchLogsVpcPrivateEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Condition: EnableLambdaInsights
    Properties:
      PrivateDnsEnabled: 'false'
      VpcEndpointType: Interface
      VpcId: !Ref VPCId
      ServiceName: !Sub com.amazonaws.${AWS::Region}.logs
      SecurityGroupIds:
        - !Ref LambdaSecurityGroup
      SubnetIds:
        - !Ref ApplicationPrivateSubnet1
        - !Ref ApplicationPrivateSubnet2

# More info about Outputs: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/outputs-section-structure.html
Outputs:
  APIDomain:
    Description: 'The api is now accessible via:'
    Value: !Sub "api.${ApplicationDomain}"
  HelloWorldFunction:
    Description: 'Function: HelloWorldFunction (ARN)'
    Value: !GetAtt HelloWorldFunction.Arn
  PingPongFunction:
    Description: 'Function: PingPongFunction (ARN)'
    Value: !GetAtt PingPongFunction.Arn
  AutomaticDeployment:
    Description: 'CI/CD Integration'
    Value: !Sub 'pushing to ${RepoOwner}/${RepoName}:${RepoBranch} will deploy to: ${ApplicationStageName}'
