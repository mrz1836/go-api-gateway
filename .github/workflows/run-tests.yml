# Workflow Name: run-go-tests
# Purpose: Run linter, tests, and upload code coverage for Go projects on pull requests and pushes to any branch
name: run-go-tests

env:
  # Explicitly enable Go modules (default in recent Go versions, but good for clarity)
  GO111MODULE: on

on:
  # Run the workflow on pull requests to any branch
  pull_request:
    branches:
      - "*"
  # Run the workflow on direct pushes to any branch
  push:
    branches:
      - "*"

# Cancel older runs of the same branch/PR if a new commit is pushed
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    strategy:
      # Define a matrix to allow testing on multiple Go versions or operating systems if needed
      matrix:
        go-version: [1.23.x]           # Go version to test against; can be extended to include other versions
        os: [ubuntu-latest]            # Use Ubuntu as the target OS; can be extended to test on Mac or Windows
    runs-on: ${{ matrix.os }}          # Dynamically set the runner OS based on matrix

    steps:
      # ————————————————————————————————————————————————————————————————
      # 1. Check out the code so we can hash go.mod/go.sum for caching
      # ————————————————————————————————————————————————————————————————
      - name: Checkout code
        uses: actions/checkout@v4

      # ————————————————————————————————————————————————————————————————
      # 2. Install the requested Go version *with built‑in caching enabled*
      #    • Caches GOMODCACHE and GOCACHE automatically
      #    • You can pass `cache-dependency-path: | go.mod\ngo.sum`
      #      if you need more than the default `go.sum`
      # ————————————————————————————————————————————————————————————————
      - name: Set up Go ${{ matrix.go-version }}
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}
          cache: true                   # default, but explicit for clarity
          cache-dependency-path: |
            **/go.sum
            **/go.mod

      # ————————————————————————————————————————————————————————————————
      # 3. Ensure go.sum exists (useful on brand‑new repos)
      # ————————————————————————————————————————————————————————————————
      - name: Ensure go.sum exists
        run: |
          if [ ! -f go.sum ]; then
            echo "go.sum not found, running 'go mod tidy' to generate it."
            go mod tidy
          fi

      # ————————————————————————————————————————————————————————————————
      # 4. Download modules (set up go cache makes this almost instant)
      # ————————————————————————————————————————————————————————————————
      - name: Download modules
        run: go mod download

      # ————————————————————————————————————————————————————————————————
      # 5. Cache golangci-lint analysis
      # ————————————————————————————————————————————————————————————————
      - name: Cache golangci-lint cache
        uses: actions/cache@v4
        with:
          path: ~/.cache/golangci-lint
          key: ${{ runner.os }}-golangci-${{ hashFiles('**/*.go', '.golangci.json') }}
          restore-keys: |
            ${{ runner.os }}-golangci-

      # ————————————————————————————————————————————————————————————————
      # 6. Run vet, linter, and tests (make target handles coverage)
      #    • Separate vet step makes failures easier to spot in the UI
      # ————————————————————————————————————————————————————————————————
      - name: Go vet
        run: go vet -v ./...

      - name: Run linter and tests
        run: make test-ci          # assumes this target runs golangci-lint + tests

      # ————————————————————————————————————————————————————————————————
      # 7. Upload coverage to Codecov
      # ————————————————————————————————————————————————————————————————
      - name: Upload code coverage
        uses: codecov/codecov-action@v5.4.3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}   # required for private repos
          flags: unittests
          fail_ci_if_error: true
          verbose: true